@name ACF RPM Calculator
@inputs [Engine, Transmission, Transfer, Differential, Wheels]:wirelink
@outputs [ExpectedWheelRPM, WheelRPM, ExpectedEngineRPM, EngineRPM]
@persist Tick WheelsList:array
@trigger 
@strict

#[
    !!!READ DESCRIPTION!!!
    
    If you want to find specific wheels/entities, put their stringpath / partial stringpath in the ModelWhitelist. Example below.
    
    Example Of Whitelist:
    ModelWhitelist = array("models/props_junk/PlasticCrate01a.mdl", "models/props_wasteland/prison_lamp001c.mdl", "models/props_interiors/Furniture_chair03a.mdl")

    If you want to, you can link wheels/entities with an Adv Entity Marker, and wire "Wheels" input from the E2 to that adv Entity Marker.
    The whitelist will not be used if wheels/entities are linked with Adv Entity Marker.
]#
if (first() | dupefinished())
{
    local ModelWhitelist = array("")
    
    
    function array wirelink:getWheels(ModelWhitelist:array)
    {
        local Entity = This:entity()
        local Wheels = array()
        
        foreach (K, S:string = ModelWhitelist)
        {
            if (S:length() == 0)
            {
                ModelWhitelist:remove(K)
            }
        }
        foreach (_, V:entity = Entity:getConnectedEntities())
        {
            if (ModelWhitelist:count())
            {
                foreach (_, S:string = ModelWhitelist)
                {
                    if (V:model():find(S))
                    {
                        Wheels:pushEntity(V)
                    }
                }
            }
            else
            {
                if (V:model():find("models/sprops/trans/wheel_") | V:model():find("models/sprops/trans/miscwheels/"))
                {
                    Wheels:pushEntity(V)
                }
            }
        }
        return Wheels
    }
    
    
    function number array:getRPM()
    {
        local AvgRPM = array()
        foreach (_, V:entity = This)
        {
            local RPM = max(abs(V:angVel():pitch()), abs(V:angVel():yaw()), abs(V:angVel():pitch())) / 6
            
            AvgRPM:pushNumber(RPM)
        }
        return AvgRPM:average()
    }
    
    
    function number wirelink:outputRPM(...Temp:array)
    {
        local RPM = This["RPM", number]
        
        foreach (K, V:wirelink = Temp)
        {
            if (!V:entity():acfIsGearbox())
            {
                Temp:remove(K)
            }
        }
        foreach (_, V:wirelink = Temp)
        {
            local Entity     = V:entity()
            local Ratio      = Entity:acfGearRatio(Entity:acfGear())
            local FinalRatio = Entity:acfFinalRatio()
            
            RPM *= Ratio * FinalRatio
        }
        return abs(RPM)
    }
    
    
    function number number:inputRPM(...Temp:array)
    {
        local RPM = This
        
        foreach (K, V:wirelink = Temp)
        {
            if (!V:entity():acfIsGearbox())
            {
                Temp:remove(K)
            }
        }
        foreach (_, V:wirelink = Temp)
        {
            local Entity     = V:entity()
            local Ratio      = Entity:acfGearRatio(Entity:acfGear())
            local FinalRatio = Entity:acfFinalRatio()
            if (Entity:acfGear() > 0)
            {
                RPM /= abs(Ratio * FinalRatio)
            }
            else
            {
                RPM = 0
            }
        }
        return RPM #/ 1.107 #The math is correct but somehow wheels linked to acf components will spin a tiny bit faster than the calculated output RPM, that's why it is divided by 1.107
    }
    
    
    if (->Wheels)
    {
        WheelsList = Wheels["Entities", array]
    }
    else
    {
        if (->Engine)        
        {
            WheelsList = Engine:getWheels(ModelWhitelist)
        }
        else
        {
            WheelsList = array()
        }
    }
    
    
    Tick = 0
}
event tick()
{
    Tick++
    
    if (Tick >= 20)
    {
        ExpectedWheelRPM   = Engine:outputRPM(Transmission, Transfer, Differential)
        WheelRPM           = WheelsList:getRPM()
        
        ExpectedEngineRPM  = WheelRPM:inputRPM(Transmission, Transfer, Differential)
        EngineRPM          = Engine["RPM", number]
        
        
        Tick = 0
    }
}
event input(_:string)
{
    reset()
}
