@name ACF RPM Calculator
@inputs [Engine, Transmission, Transfer, Differential, Wheels]:wirelink
@outputs [ExpectedWheelRPM, WheelRPM, ExpectedEngineRPM, EngineRPM]
@persist [E, T, F, D]:entity [W, WheelsList]:array Tick
@trigger 
@strict

if (first() | dupefinished())
{
    E = Engine:entity()
    T = Transmission:entity()
    F = Transfer:entity()
    D = Differential:entity()
    W = Wheels["Entities", array]
    
    
    if (E & T & D)
    {
        function array entity:getWheels() #Finds all wheels connected to 
        {
            if (This:acfIsEngine())
            {
                Array = This:acfGetLinkedWheels()
            }
            return Array
        }
        
        
        function array checkInput(InputName:string) #Checks if wheels are linked with adv entity marker and outputs those wheels if it is linked.
        {
            local Input = ioGetInputWirelink(InputName)
                
            if (Input)
            {
                This = W
            }
            else
            {
                This = E:getWheels()
            }
            return This
        }
        
        
        function number array:getRPM() #Finds average rpm of wheels connected.
        {
            local AvgRPM = array()
            
            foreach (_, V:entity = This)
            {
                local RPM = max(abs(V:angVel():pitch()), abs(V:angVel():yaw()), abs(V:angVel():pitch())) / 6
                
                AvgRPM:pushNumber(RPM)
            }
            return AvgRPM:average()
        }
        
        
        function number entity:outputRPM(...Temp:array) #Calculates the expected wheel rpm based off of engine rpm and gearbox ratios.
        {
            local RPM = This:acfRPM()
            
            foreach (K, V:entity = Temp)
            {
                if (!V:acfIsGearbox())
                {
                    Temp:remove(K)
                }
            }
            foreach (_, V:entity = Temp)
            {
                local Ratio      = V:acfGearRatio(V:acfGear())
                local FinalRatio = V:acfFinalRatio()
                
                RPM *= Ratio * FinalRatio
            }
            return abs(RPM)
        }
        
        
        function number number:inputRPM(...Temp:array) #Calculates engine rpm based off of wheel rpm and gearbox ratios.
        {
            local RPM = This
            
            foreach (K, V:entity = Temp)
            {
                if (!V:acfIsGearbox())
                {
                    Temp:remove(K)
                }
            }
            foreach (_, V:entity = Temp)
            {
                local Ratio      = V:acfGearRatio(V:acfGear())
                local FinalRatio = V:acfFinalRatio()
                if (V:acfGear() > 0)
                {
                    RPM /= abs(Ratio * FinalRatio)
                }
                else
                {
                    RPM = 0
                }
            }
            return RPM
        }
    
        
        WheelsList = checkInput("Wheels") #Puts wheels found in an array.
    }
    
    
    Tick = 0
}
event tick()
{
    Tick++
    
    if (Tick >= 20)
    {
        if (WheelsList:count())
        {
            WheelRPM           = WheelsList:getRPM()        #Finds rpm from the array.
            ExpectedWheelRPM   = E:outputRPM(T, F, D)       #Calculates the expected wheel rpm based off of engine rpm and gearbox ratios.
            
            EngineRPM          = Engine["RPM", number]      #True engine rpm.
            ExpectedEngineRPM  = WheelRPM:inputRPM(T, F, D) #Calculates engine rpm based off of wheel rpm and gearbox ratios.
        }
        
        
        Tick = 0
    }
}
